/* Generated by apex-mocks-generator version 4.0.1 */
@isTest
public class RVMocks
{
	public class RVCategories extends fflib_SObjectMocks.SObjectDomain implements RVICategories
	{
		private fflib_ApexMocks mocks;

		public RVCategories(fflib_ApexMocks mocks)
		{
			super(mocks);
			this.mocks = mocks;
		}

		public List<RVCPQDomainHelper.Category> categoriesOfPriceList(ID priceListId)
		{
			return (List<RVCPQDomainHelper.Category>) mocks.mockNonVoidMethod(this, 'categoriesOfPriceList', new List<Type> {System.Type.forName('ID')}, new List<Object> {priceListId});
		}
	}

	public class RVCPQService implements RVICPQService
	{
		private fflib_ApexMocks mocks;

		public RVCPQService(fflib_ApexMocks mocks)
		{
			this.mocks = mocks;
		}

		public List<RVCPQDomainHelper.Category> categoriesOfPriceList(ID priceListId)
		{
			return (List<RVCPQDomainHelper.Category>) mocks.mockNonVoidMethod(this, 'categoriesOfPriceList', new List<Type> {System.Type.forName('ID')}, new List<Object> {priceListId});
		}

		public List<RVCPQDomainHelper.Product> productsOfPriceListAndCategory(ID priceListId, ID categoryId)
		{
			return (List<RVCPQDomainHelper.Product>) mocks.mockNonVoidMethod(this, 'productsOfPriceListAndCategory', new List<Type> {System.Type.forName('ID'), System.Type.forName('ID')}, new List<Object> {priceListId, categoryId});
		}

		public ID addProductToCartWith(ID priceListId, Integer quantity, String productName, String quoteNumber)
		{
			return (ID) mocks.mockNonVoidMethod(this, 'addProductToCartWith', new List<Type> {System.Type.forName('ID'), System.Type.forName('Integer'), System.Type.forName('String'), System.Type.forName('String')}, new List<Object> {priceListId, quantity, productName, quoteNumber});
		}

		public RVILineItems lineItemsOfCart(ID cartId)
		{
			return (RVILineItems) mocks.mockNonVoidMethod(this, 'lineItemsOfCart', new List<Type> {System.Type.forName('ID')}, new List<Object> {cartId});
		}
	}

	public class RVProducts extends fflib_SObjectMocks.SObjectDomain implements RVIProducts
	{
		private fflib_ApexMocks mocks;

		public RVProducts(fflib_ApexMocks mocks)
		{
			super(mocks);
			this.mocks = mocks;
		}

		public List<RVCPQDomainHelper.Product> productsOfPriceListAndCategory(ID priceListId, ID categoryId)
		{
			return (List<RVCPQDomainHelper.Product>) mocks.mockNonVoidMethod(this, 'productsOfPriceListAndCategory', new List<Type> {System.Type.forName('ID'), System.Type.forName('ID')}, new List<Object> {priceListId, categoryId});
		}
	}

	public class RVLineItemsSelector extends fflib_SObjectMocks.SObjectSelector implements RVILineItemsSelector
	{
		private fflib_ApexMocks mocks;

		public RVLineItemsSelector(fflib_ApexMocks mocks)
		{
			super(mocks);
			this.mocks = mocks;
		}

		public List<Apttus_Config2__LineItem__c> lineItemsOfCart(ID cartId)
		{
			return (List<Apttus_Config2__LineItem__c>) mocks.mockNonVoidMethod(this, 'lineItemsOfCart', new List<Type> {System.Type.forName('ID')}, new List<Object> {cartId});
		}
	}

	public class RVLineItems extends fflib_SObjectMocks.SObjectDomain implements RVILineItems
	{
		private fflib_ApexMocks mocks;

		public RVLineItems(fflib_ApexMocks mocks)
		{
			super(mocks);
			this.mocks = mocks;
		}

		public ID addProductToCartWith(ID priceListId, Integer quantity, String productName, String quoteNumber)
		{
			return (ID) mocks.mockNonVoidMethod(this, 'addProductToCartWith', new List<Type> {System.Type.forName('ID'), System.Type.forName('Integer'), System.Type.forName('String'), System.Type.forName('String')}, new List<Object> {priceListId, quantity, productName, quoteNumber});
		}
	}

}